apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nanna.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
        {{- include "common.labels" . | indent 4 }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ template "nanna.name" . }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: '9001'
        prometheus.io/scrape: 'true'
      labels:
          {{- include "common.labels" . | indent 8 }}
    spec:
      containers:
        - name: nanna
          image: {{ .Values.image.identifier }}
          imagePullPolicy: Always
          env:
            - name: JDK_JAVA_OPTIONS
              value: -server -Xmx500m -XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90
                -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -Dspring.config.location=/etc/application-config/application.properties
                -Dfile.encoding=UTF-8  {{- if .Values.monitoringEnabled }} -Dcom.sun.management.jmxremote.port=9999  -Dcom.sun.management.jmxremote.rmi.port=9998 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1
            {{- end }}
            - name: TZ
              value: Europe/Oslo
          envFrom:
            - secretRef:
                name: psql-credentials
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 9001
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 9001
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 5
          resources:
            limits:
              memory: 800Mi
            requests:
              cpu: 100m
              memory: 700Mi
          volumeMounts:
            - mountPath: /etc/application-config
              name: application-config
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      serviceAccountName: application
      terminationGracePeriodSeconds: 30
      topologySpreadConstraints:
        - maxSkew: 3
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: {{ .Release.Name }}
        - maxSkew: 5
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: {{ .Release.Name }}
      volumes:
        - configMap:
            defaultMode: 420
            name: nanna-config
          name: application-config
